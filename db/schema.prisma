// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  name           String?
  email          String    @unique
  hashedPassword String?   @map("has_password")
  role           String    @default("USER")
  riotAccountId  Int?      @map("riot_account_id")

  tokens      Token[]
  sessions    Session[]
  Article     Article[]
  riotAccount RiotAccount? @relation(fields: [riotAccountId], references: [id])

  @@map("user")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  expiresAt          DateTime? @map("expires_at")
  handle             String    @unique
  hashedSessionToken String?   @map("hashed_session_token")
  antiCSRFToken      String?   @map("anti_csrf_token")
  publicData         String?   @map("public_data")
  privateData        String?   @map("private_data")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
  @@map("session")
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  hashedToken String    @map("hashed_token")
  // type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime  @map("expires_at")
  sentTo      String    @map("sent_to")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  @@unique([hashedToken, type])
  @@map("token")
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}

model Article {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String

  deletedAt DateTime? @map("deleted_at")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  @@map("article")
}

model RiotAccount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  puuid     String
  gameName  String   @map("game_name")
  tagLine   String   @map("tag_line")

  User User[]
  @@map("riot_account")
}
